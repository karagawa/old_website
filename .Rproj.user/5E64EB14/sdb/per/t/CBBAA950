{
    "contents" : "---\nlayout: post\ntitle: \"How to Import Data into R\"\nauthor: \"Chuan Tang\"\ndate: \"February 25, 2016\"\noutput: html_document\nexcerpt: A summary about various methods to import data into R.\ntags: R\ncomments: true\n---\n\n```{r global_options, include=FALSE}\nknitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',\n                      echo=TRUE, warning=FALSE, message=FALSE)\n```\n\nImporting data into R is the first step for all data analysis. In addition to using the basic `read.table()` command, this article introduces (1) the `readr` package developed by [Hadley Wickham](http://hadley.nz/), (2) import data from internet to R using package `jsonlite`, and (3) connect and fetch data from online database. This article is a summary of completing the \"Importing Data into R\" course of [DataCamp](https://www.datacamp.com/courses/importing-data-into-r). \n\nFirstly, we load all packaged needed for this sessions:\n\n```{r loading}\nlibrary(readr)\nlibrary(jsonlite)\n```\n\n> Importing data into R using `readr` package \n\nThe basic R provides `read.table()` to import data. I am using a dataset for [globle airports dump file](https://datahub.io/dataset/global_airports/resource/82b48517-63ed-47d7-be5f-e6775fc015bd) as example here:\n\nFirstly, we need to download the data for local use:\n\n```{r download data, cache=TRUE}\n\nurl <- \"https://commondatastorage.googleapis.com/ckannet-storage/2012-07-09T214020/global_airports.csv\"\n\nsample_path <- file.path(\"~\", \"sample.csv\")  # set the file path for download data\n\ndownload.file(url, sample_path)\n\n```\nOnce we download the data successfully, we can read the downloaded file directly from the `sample_path`. `readr` provides `read_csv` for `.csv` file and `read_tsv` for `.txt` file:\n\n```{r read table using readr}\nlibrary(readr)\n\nsample_data <- read_csv(sample_path)\n\n```\n\nThen, we can check the structure of the `example` data:\n\n```{r, echo=TRUE}\nstr(sample_data)\n```\n\nThe biggest advantage of using the `read_csv()` rather than `read.csv()` is that the former is more concise and parsimony: you no longer need to specify the `header` and `sep` keys for most situations. Furthermore, as shown above, the data structure includes `tbl_df`, which is convenient for data analysis using package `data.table`. \n\n> Import **JSON** data into R\n\n[JSON(JavaScript Object Notation)](http://www.json.org/) is a lightweight data-interchange format. The upside of using *JSON* data is it is easy for human reading and writing. \n\nFirstly, it is necessary to briefly introduce the Syntax rules for *JSON* data:\n\n#### JSON Data\n\n  + Example:  \"firstName\":\"Chuan\"\n\n#### JSON Values\n\n  + Example: {\"firstName\":\"Chuan\", \"lastName\":\"Tang\"}\n  \n#### JSON Arrays\n\n  + Example: \n  \n  \"employees\":[\n    {\"firstName\":\"Chuan\", \"lastName\":\"Tang\"},\n    {\"firstName\":\"Jason\", \"lastName\":\"Smith\"},\n    {\"firstName\":\"Peter\",\"lastName\":\"Jones\"}\n]\n\nMore details about *JSON* format and how to use it can be found it [here](http://www.w3schools.com/json/default.asp).\n\nThe package used for fetching and converting *JSON* data into R is [`jsonlite`](https://cran.r-project.org/web/packages/jsonlite/index.html) developed by Jeroen Ooms. I am using Reservoir Information Feed data in *JSON* format published on [datahub](https://datahub.io/dataset/reservoir-information-feed/resource/44ea13ec-c9a8-4fc5-9480-4b9f4fa59718) as example.\n\n\nAt first, we import the online *JSON* data into R using the `fromJSON()` command :\n\n```{r jason import, eval=FALSE}\n\ndata_url <- \"http://www.ywonline.co.uk/web/reservoi.nsf/ReservoirsJSON\"\n\njson_data <- fromJSON(data_url)  # It is possible to directly put the url here as well\n\nstr(json_data)\n```\n\nAs to convert R data into *JSON* format, `toJSON()` command could be used. Moreover, `prettify()` and `minify()` are two commands to make the *JSON* pretty or as concise as possible:\n\n```{r}\n\npretty_json <- toJSON(mtcars, pretty = T)  # to make JSON data in a pretty way, the pretty key could be set directly\n\nmini_json <- minify(pretty_json)  # to convert the pretty JSON data into concise way\n\n```\n\nThe session info for this test is shown below:\n```{r}\n\nsessionInfo()\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1456965822982.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3700212807",
    "id" : "CBBAA950",
    "lastKnownWriteTime" : 1456966170,
    "path" : "~/GitHub/karagawa.github.io/_source/2016-02-26-Importing-data-into-R.Rmd",
    "project_path" : "_source/2016-02-26-Importing-data-into-R.Rmd",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_markdown"
}